# Geographic data in Python {#spatial-class}

## Introduction

...

Importing packages

```{python}
import shapely.geometry
import geopandas as gpd
```

```{python, include=FALSE}
import pandas as pd
pd.set_option("display.max_rows", 4)
```

## Vector data

### Vector layers

The typical data structure for vector data is a vector layer.

Most often, we import an existing vector layer from a file, such as a Shapefile or a GeoPackage file. 

```{python}
dat = gpd.read_file("data/ne_110m_admin_0_countries.shp")
```

The result is a `GeoDataFrame`:

```{python}
dat
```

Basic plotting using the `.plot` method:

```{python}
dat.plot()
```

Subsetting:

```{python}
dat1 = dat[["SOVEREIGNT", "geometry"]]
dat1
```

```{python}
dat1 = dat1[dat1["SOVEREIGNT"] == "Egypt"]
dat1
```

### Geometry columns

One of the columns in a `GeoDataFrame` is a geometry column, of class `GeoSeries`. The geometry column contains the geometric part of the vector layer, e.g., the `POLYGON` or `MULTIPOLYGON` geometries of the 177 countries in `dat`:

```{python}
dat.dtypes
```

```{python}
dat["geometry"]
```

### Geometries

Each element in the geometry column is a (Simple Feature) geometry, of class `shapely`. For example, here is one specific geometry selected by implicit index (that of Canada):

```{python}
dat["geometry"].iloc[3]
```

and here is a specific geometry selected based on the `"SOVEREIGNT"` attribute:

```{python}
dat[dat["SOVEREIGNT"] == "Egypt"]["geometry"].iloc[0]
```

## Raster data

### Using `rasterio`

Importing the `rasterio` package:

```{python}
import numpy as np
import rasterio
from rasterio.plot import show
```

Creating a file connection:

```{python}
src = rasterio.open("data/gpw_v4_population_density_rev11_2020_15_min.tif")
```

Examining the metadata:

```{python}
src.meta
```

Plotting:

```{python}
show(src)
```

Reading the 1st layer:

```{python}
s = src.read(1)
s
```


```{python}
msk = src.read_masks(1)
msk
```


```{python}
s[msk == 0] = np.nan
```

```{python}
show(~(np.isnan(s)) & (s > 100))
```

### Using `xarray`

...

## Coordinate Reference Systems

```{python}
dat.crs
```

```{python}
r.crs
```

## Units

...

## Exercises

...

