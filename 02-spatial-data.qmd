# Geographic data in Python {#spatial-class}

## Introduction

...

Importing packages

```{python}
import shapely.geometry
import geopandas as gpd
```

```{python, include=FALSE}
pd.set_option("display.max_rows", 4)
```

## Vector data

### Vector layers

The typical data structure for vector data is a vector layer.

Importing from file:

```{python}
path = gpd.datasets.get_path('naturalearth_lowres')
dat = gpd.read_file(path)
```

The result is a `GeoDataFrame`:

```{python}
dat
```

Basic plotting using the `.plot` method:

```{python}
dat.plot()
```

### Geometry columns

One of the columns in a `GeoDataFrame` is a geometry column, of class `GeoSeries`. The geometry column contains the geometric part of the vector layer, e.g., the `POLYGON` or `MULTIPOLYGON` geometries of the 177 countries in `dat`:

```{python}
dat["geometry"]
```

### Geometries

Each element in the geometry column is a (Simple Feature) geometry, of class `shapely`. For example, here is one specific geometry selected by implicit index (that of Canada):

```{python}
dat["geometry"].iloc[3]
```

and here is a specific geometry selected based on the `"name"` attribute:

```{python}
dat[dat["name"] == "Egypt"]["geometry"].iloc[0]
```

## Raster data

...

## Coordinate Reference Systems

...

## Units

...

## Exercises

...

